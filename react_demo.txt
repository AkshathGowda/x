action
import jsonPlaceholder from '../apis/JSONPlaceholder.js';


export const fetchPosts=()=>async dispatch=>
  {
    const response=await jsonPlaceholder.get('/posts');
   dispatch({type:'FETCH_POSTS',payload:response.data})
  };

  export const fetchUser =id=> async dispatch=>

  {
    const response=await jsonPlaceholder.get(`/users/${id}`);
    dispatch({type:'FETCH_USER',payload:response.data});
  };
--------------------------
reducers
import {combineReducers} from 'redux';
import PostReducer from './PostReducer';
import UserReducer from './UserReducer';

export default combineReducers({
    posts:PostReducer,
    users:UserReducer
});



1)export default  (state=[],action)=>
{
   
    switch(action.type)
    {
        case 'FETCH_POSTS':
        return action.payload;
       default:
                return state;
    }
};

2)export default  (state=[],action)=>
{
   
    switch(action.type)
    {
        case 'FETCH_POSTS':
        return action.payload;
       default:
                return state;
    }
};
-------------------------------
 components

import React, { Component } from 'react'
import PostList from './PostList';

 class App extends Component {
    render() {
        return (
            <div>
                <PostList />
            </div>
        )
    }
}

export default App

2)import React, { Component } from 'react'
import {connect} from 'react-redux';
import {fetchPosts} from '../actions';
import UserHeader from './UserHeader'

 class PostList extends Component {
     componentDidMount()
     {
         this.props.fetchPosts();
     }
     renderList()
     {
         return this.props.posts.map(post=>
            {
              return(
                  <div className="item" key={post.id}>
                    <div>
                        <h4>{post.title}</h4>
                        <p>{post.body}</p>
                        
                    </div>
                   
                       <UserHeader UserId={post.userId}/>
                  
                  </div>
              );
            })
     }
    render() {
        console.log(this.props.posts);
        return (
            <div>
              {this.renderList()}
            </div>
        );
    }
}
 

const mapStateToProps=(state)=>
{
return{posts:state.posts}
}

export default connect(
    mapStateToProps,
    {fetchPosts}
    )(PostList)
    
    
 3)import React, { Component } from 'react'
import {connect} from 'react-redux';
import {fetchUser} from '../actions'

 class UserHeader extends Component {
     componentDidMount()
     {
         this.props.fetchUser(this.props.UserId);
     }
    
     render() {

        const {user}=this.props;
      
        if(!user)
        {
           return null;
        }
      return (<div><h2>{user.name}</h2></div>);
        

    };
}
const mapStateToProps=(state,ownProps)=>{
    return{user:state.users.find(user=>user.id===ownProps.UserId)}
}

export default connect(mapStateToProps, {fetchUser})(UserHeader);
    
   
    
   
-----------------------------
 apis
import axios from 'axios';

 export default axios.create(
     {
         baseURL:'https://jsonplaceholder.typicode.com'
     }
 )
------------------------------
import React from 'react';
import ReactDOM from 'react-dom';
import {Provider} from 'react-redux';
import {createStore,applyMiddleware} from 'redux';
import thunk from 'redux-thunk';

import App from './components/App';
import reducers from './reducers';

const store=createStore(reducers,applyMiddleware(thunk));

ReactDOM.render(<Provider store={store}>
    <App />
</Provider>,
document.querySelector("#root"));
